<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Blog Title</title>
    <link>http://www.ledbk.com</link>
    <pubDate>2013-03-18 11:38:15 +0800</pubDate>
    <item>
      <title>gitlab on centos</title>
      <link>http://www.ledbk.com/gitlab/gitlab-on-centos/</link>
      <pubDate>2013-03-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;注:阅读前请慎重考虑,这是一场噩梦般的部署过程&lt;/p&gt;

&lt;h3&gt;1.添加EPEL源&lt;/h3&gt;

&lt;p&gt;不添加这个，什么依赖都装不了。所以，你懂得。这个是centos 5的，其他版本的可以去网上搜，就地址不一样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-5-4.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注:epel源会经常更新,需要找到最新的&lt;/p&gt;

&lt;h3&gt;2.安装依赖&lt;/h3&gt;

&lt;p&gt;就是安装依赖，建议python自己编译安装一个，版本新一点。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y groupinstall &#39;Development Tools&#39; &#39;Additional Development&#39;
yum -y install readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel gcc-c++ libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui python-devel redis
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.编译安装ruby&lt;/h3&gt;

&lt;p&gt;注意:千万不要用最新版，要用p327版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p327.tar.gz
tar xfvz ruby-1.9.3-p327.tar.gz
cd ruby-1.9.3-p327
./configure --disable-install-doc --enable-shared --disable-pthread
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译前，如果可以的话，最好安装下qt,为毛要qt!如果不行请参阅官方的文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install qt-devel qtwebkit-devel
export PATH=$PATH:/usr/lib32/qt4/bin   # 32位和64位
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.更新gem,安装rails&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem update --system 
gem update 
gem install rails
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;5.Gitolite安装&lt;/h3&gt;

&lt;p&gt;这步非常重要,如果出错,后面前功尽弃&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adduser --shell /bin/bash --create-home --home-dir /home/gitlab gitlab
adduser --system --shell /bin/sh --comment &#39;gitolite&#39; --create-home --home-dir /home/git git
sudo -u gitlab -H ssh-keygen -q -N &#39;&#39; -t rsa -f /home/gitlab/.ssh/id_rsa
sudo usermod -a -G git gitlab

cd /home/git
sudo -u git -H git clone -b gl-v320 https://github.com/gitlabhq/gitolite.git /home/git/gitolite
# Add Gitolite scripts to $PATH
sudo -u git -H mkdir /home/git/bin
sudo -u git -H sh -c &#39;printf &amp;quot;%b\n%b\n&amp;quot; &amp;quot;PATH=\$PATH:/home/git/bin&amp;quot; &amp;quot;export PATH&amp;quot; &amp;gt;&amp;gt; /home/git/.profile&#39;
sudo -u git -H sh -c &#39;gitolite/install -ln /home/git/bin&#39;

# Copy the gitlab user&#39;s (public) SSH key ...
sudo cp /home/gitlab/.ssh/id_rsa.pub /home/git/gitlab.pub
sudo chmod 0444 /home/git/gitlab.pub

# ... and use it as the admin key for the Gitolite setup
sudo -u git -H sh -c &amp;quot;PATH=/home/git/bin:$PATH; gitolite setup -pk /home/git/gitlab.pub&amp;quot;

# Make sure the Gitolite config dir is owned by git
sudo chmod -R 750 /home/git/.gitolite/
sudo chown -R git:git /home/git/.gitolite/

# Make sure the repositories dir is owned by git and it stays that way
sudo chmod -R ug+rwXs,o-rwx /home/git/repositories/
sudo chown -R git:git /home/git/repositories/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注:如果自定义目录的话后面会需要手动修改很多文件,如果不是必须的请就用home目录吧&lt;/p&gt;

&lt;p&gt;测试gitolite安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u gitlab -H git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin

sudo rm -rf /tmp/gitolite-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;6. 安装Gitlab&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# We&#39;ll install GitLab into home directory of the user &amp;quot;gitlab&amp;quot;
cd /home/gitlab
# Clone GitLab repository
sudo -u gitlab -H git clone https://github.com/gitlabhq/gitlabhq.git gitlab

# Go to gitlab dir 
cd /home/gitlab/gitlab

# Checkout to stable release
sudo -u gitlab -H git checkout 4-2-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注:我这里通过了4.2的安装,如果选用5.0master分支可能会安装失败&lt;/p&gt;

&lt;p&gt;设置权限还有其他选项&lt;/p&gt;

&lt;p&gt;cd /home/gitlab/gitlab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Copy the example GitLab config
sudo -u gitlab -H cp config/gitlab.yml.example config/gitlab.yml

# 把其中的gitlab部分和ssh部分的host改成自己的域名就行了
sudo -u gitlab -H vim config/gitlab.yml

# Make sure GitLab can write to the log/ and tmp/ directories
sudo chown -R gitlab log/
sudo chown -R gitlab tmp/
sudo chmod -R u+rwX  log/
sudo chmod -R u+rwX  tmp/

# Copy the example Unicorn config
sudo -u gitlab -H cp config/unicorn.rb.example config/unicorn.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据库设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u gitlab cp config/database.yml.mysql config/database.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装Gems,用了n多的gem,请耐心等待&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /home/gitlab/gitlab

sudo gem install charlock_holmes --version &#39;0.6.9&#39;

# For mysql db
sudo -u gitlab -H bundle install --deployment --without development test postgres

# Or For postgres db
sudo -u gitlab -H bundle install --deployment --without development test mysql

# 设置git全局设置
sudo -u gitlab -H git config --global user.name &amp;quot;GitLab&amp;quot;
sudo -u gitlab -H git config --global user.email &amp;quot;gitlab@localhost&amp;quot;

# 设置Hook脚本
sudo cp ./lib/hooks/post-receive /home/git/.gitolite/hooks/common/post-receive
sudo chown git:git /home/git/.gitolite/hooks/common/post-receive

# 初始化数据库
sudo -u gitlab -H bundle exec rake gitlab:app:setup RAILS_ENV=production

# 安装初始化脚本，这是centos，ubuntu有对应的脚本
sudo wget https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab-centos -P /etc/init.d/
sudo chmod +x /etc/init.d/gitlab-centos
chkconfig --add gitlab-centos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注:如果sudo -u gitlab无法执行指令,请su gitlab切换至gitlab用户进行才做,否则权限错乱导致安装失败&lt;/p&gt;

&lt;p&gt;测试gitlab的状态，正常则启动&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看环境信息
sudo -u gitlab -H bundle exec rake gitlab:env:info RAILS_ENV=production

# 检测gitlab状态，非绿色的太多了，要注意修复下
sudo -u gitlab -H bundle exec rake gitlab:check RAILS_ENV=production

# 启动
sudo service gitlab start
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;7. Nginx配置&lt;/h3&gt;

&lt;p&gt;就是建立一个反向代理给unicon&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream gitlab {
  server unix:/home/gitlab/gitlab/tmp/sockets/gitlab.socket;
}

server {
  listen 80;         # e.g., listen 192.168.1.1:80;
  server_name Domain_NAME;     # e.g., server_name source.example.com;
  root /home/gitlab/gitlab/public;

  # individual nginx logs for this gitlab vhost
  access_log  /var/log/nginx/gitlab_access.log;
  error_log   /var/log/nginx/gitlab_error.log;

  location / {
    # serve static files from defined root folder;.
    # @gitlab is a named location for the upstream fallback, see below
    try_files $uri $uri/index.html $uri.html @gitlab;
  }

  # if a file, which is not found in the root folder is requested,
  # then the proxy pass the request to the upsteam (gitlab unicorn)
  location @gitlab {
    proxy_read_timeout 300; # https://github.com/gitlabhq/gitlabhq/issues/694
    proxy_connect_timeout 300; # https://github.com/gitlabhq/gitlabhq/issues/694
    proxy_redirect     off;

    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Host              $http_host;
    proxy_set_header   X-Real-IP         $remote_addr;

    proxy_pass http://gitlab;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8. 完成&lt;/h3&gt;

&lt;p&gt;期间可能会出现各种依赖问题和运行失败,只能靠你自己处理了,噩梦般的过程结束了,享受吧,注意看看git的hook是否正常工作,检查redis等等,post-recieve的问题还是没找到很好的解决办法,后面再来更新此文&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Git Submodule</title>
      <link>http://www.ledbk.com/git/Git-Submodule/</link>
      <pubDate>2013-03-17 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;经常有这样的事情，当你在一个项目上工作时，你需要在其中使用另外一个项目。也许它是一个第三方开发的库或者是你独立开发和并在多个父项目中使用的。这个场景下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。&lt;/p&gt;

&lt;p&gt;这里有一个例子。假设你在开发一个网站，为之创建Atom源。你不想编写一个自己的Atom生成代码，而是决定使用一个库。你可能不得不像CPAN install或者Ruby gem一样包含来自共享库的代码，或者将代码拷贝到你的项目树中。如果采用包含库的办法，那么不管用什么办法都很难去定制这个库，部署它就更加困难了，因为你必须确保每个客户都拥有那个库。把代码包含到你自己的项目中带来的问题是，当上游被修改时，任何你进行的定制化的修改都很难归并。&lt;/p&gt;

&lt;p&gt;Git 通过子模块处理这个问题。子模块允许你将一个 Git 仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。&lt;/p&gt;

&lt;p&gt;假设你想把 Rack 库（一个 Ruby 的 web 服务器网关接口）加入到你的项目中，可能既要保持你自己的变更，又要延续上游的变更。首先你要把外部的仓库克隆到你的子目录中。你通过git submodule add将外部项目加为子模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add git://github.com/chneukirchen/rack.git rack
Initialized empty Git repository in /opt/subtest/rack/.git/
remote: Counting objects: 3181, done.
remote: Compressing objects: 100% (1534/1534), done.
remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
Receiving objects: 100% (3181/3181), 675.42 KiB | 422 KiB/s, done.
Resolving deltas: 100% (1951/1951), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你就在项目里的rack子目录下有了一个 Rack 项目。你可以进入那个子目录，进行变更，加入你自己的远程可写仓库来推送你的变更，从原始仓库拉取和归并等等。如果你在加入子模块后立刻运行git status，你会看到下面两项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
On branch master
Changes to be committed:
(use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
new file: .gitmodules
new file: rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先你注意到有一个.gitmodules文件。这是一个配置文件，保存了项目 URL 和你拉取到的本地子目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .gitmodules 
[submodule &amp;quot;rack&amp;quot;]
path = rack
url = git://github.com/chneukirchen/rack.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你有多个子模块，这个文件里会有多个条目。很重要的一点是这个文件跟其他文件一样也是处于版本控制之下的，就像你的.gitignore文件一样。它跟项目里的其他文件一样可以被推送和拉取。这是其他克隆此项目的人获知子模块项目来源的途径。&lt;/p&gt;

&lt;p&gt;git status的输出里所列的另一项目是 rack 。如果你运行在那上面运行git diff，会发现一些有趣的东西：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff --cached rack
diff --git a/rack b/rack
new file mode 160000
index 0000000..08d709f
--- /dev/null
+++ b/rack
@@ -0,0 +1 @@
+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尽管rack是你工作目录里的子目录，但 Git 把它视作一个子模块，当你不在那个目录里时并不记录它的内容。取而代之的是，Git 将它记录成来自那个仓库的一个特殊的提交。当你在那个子目录里修改并提交时，子项目会通知那里的 HEAD 已经发生变更并记录你当前正在工作的那个提交；通过那样的方法，当其他人克隆此项目，他们可以重新创建一致的环境。&lt;/p&gt;

&lt;p&gt;这是关于子模块的重要一点：你记录他们当前确切所处的提交。你不能记录一个子模块的master或者其他的符号引用。&lt;/p&gt;

&lt;p&gt;当你提交时，会看到类似下面的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &#39;first commit with submodule rack&#39;
[master 0550271] first commit with submodule rack
2 files changed, 4 insertions(+), 0 deletions(-)
create mode 100644 .gitmodules
create mode 160000 rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意 rack 条目的 160000 模式。这在Git中是一个特殊模式，基本意思是你将一个提交记录为一个目录项而不是子目录或者文件。&lt;/p&gt;

&lt;p&gt;你可以将rack目录当作一个独立的项目，保持一个指向子目录的最新提交的指针然后反复地更新上层项目。所有的Git命令都在两个子目录里独立工作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1
commit 0550271328a0038865aad6331e620cd7238601bb
Author: xxx &amp;lt;xxx@gmail.com&amp;gt;
Date: Thu Apr 9 09:03:56 2009 -0700
first commit with submodule rack
$ cd rack/
$ git log -1
commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433
Author: xxxx &amp;lt;xxxx@gmail.com&amp;gt;
Date: Wed Mar 25 14:49:04 2009 +0100
Document version change
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;克隆一个带子模块的项目&lt;/p&gt;

&lt;p&gt;这里你将克隆一个带子模块的项目。当你接收到这样一个项目，你将得到了包含子项目的目录，但里面没有文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/xxx/myproject.git
Initialized empty Git repository in /opt/myproject/.git/
remote: Counting objects: 6, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 6 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (6/6), done.
    $ cd myproject
$ ls -l
total 8
-rw-r--r-- 1 schacon admin 3 Apr 9 09:11 README
drwxr-xr-x 2 schacon admin 68 Apr 9 09:11 rack
$ ls rack/
$rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目录存在了，但是是空的。你必须运行两个命令：git submodule init来初始化你的本地配置文件，git submodule update来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule init
Submodule &#39;rack&#39; (git://github.com/xxx/rack.git) registered for path &#39;rack&#39;
$ git submodule update
Initialized empty Git repository in /opt/myproject/rack/.git/
remote: Counting objects: 3181, done.
remote: Compressing objects: 100% (1534/1534), done.
remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
Receiving objects: 100% (3181/3181), 675.42 KiB | 173 KiB/s, done.
Resolving deltas: 100% (1951/1951), done.
Submodule path &#39;rack&#39;: checked out &#39;08d709f78b8c5b0fbeb7821e37fa53e69afcf433&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你的rack子目录就处于你先前提交的确切状态了。如果另外一个开发者变更了 rack 的代码并提交，你拉取那个引用然后归并之，将得到稍有点怪异的东西：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge origin/master
Updating 0550271..85a3eee
Fast forward
rack | 2 +-
1 files changed, 1 insertions(+), 1 deletions(-)
[master*]$ git status
On branch master
Changed but not updated:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
(use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
modified: rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你归并来的仅仅上是一个指向你的子模块的指针；但是它并不更新你子模块目录里的代码，所以看起来你的工作目录处于一个临时状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff
diff --git a/rack b/rack
index 6c5e70b..08d709f 160000
--- a/rack
+++ b/rack
@@ -1 +1 @@
-Subproject commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;事情就是这样，因为你所拥有的子模块的指针并对应于子模块目录的真实状态。为了修复这一点，你必须再次运行git submodule update：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule update
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 2 (delta 0)
Unpacking objects: 100% (3/3), done.
From git@github.com:schacon/rack
08d709f..6c5e70b master -&amp;gt; origin/master
Submodule path &#39;rack&#39;: checked out &#39;6c5e70b984a60b3cecd395edd5b48a7575bf58e0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每次你从主项目中拉取一个子模块的变更都必须这样做。看起来很怪但是管用。&lt;/p&gt;

&lt;p&gt;一个常见问题是当开发者对子模块做了一个本地的变更但是并没有推送到公共服务器。然后他们提交了一个指向那个非公开状态的指针然后推送上层项目。当其他开发者试图运行git submodule update，那个子模块系统会找不到所引用的提交，因为它只存在于第一个开发者的系统中。如果发生那种情况，你会看到类似这样的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule update
fatal: reference isn’t a tree: 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Unable to checkout &#39;6c5e70b984a60b3cecd395edd5ba7575bf58e0&#39; in submodule path &#39;rack&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你不得不去查看谁最后变更了子模块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1 rack
commit 85a3eee996800fcfa91e2119372dd4172bf76678
Author: Scott Chacon &amp;lt;schacon@gmail.com&amp;gt;
Date: Thu Apr 9 09:19:14 2009 -0700
added a submodule reference I will never make public. hahahahaha!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，你给那个家伙发电子邮件说他一通。&lt;/p&gt;

&lt;p&gt;上层项目&lt;/p&gt;

&lt;p&gt;有时候，开发者想按照他们的分组获取一个大项目的子目录的子集。如果你是从 CVS 或者 Subversion 迁移过来的话这个很常见，在那些系统中你已经定义了一个模块或者子目录的集合，而你想延续这种类型的工作流程。&lt;/p&gt;

&lt;p&gt;在 Git 中实现这个的一个好办法是你将每一个子目录都做成独立的 Git 仓库，然后创建一个上层项目的 Git 仓库包含多个子模块。这个办法的一个优势是你可以在上层项目中通过标签和分支更为明确地定义项目之间的关系。&lt;/p&gt;

&lt;p&gt;子模块的问题&lt;/p&gt;

&lt;p&gt;使用子模块并非没有任何缺点。首先，你在子模块目录中工作时必须相对小心。当你运行git submodule update，它会检出项目的指定版本，但是不在分支内。这叫做获得一个分离的头——这意味着 HEAD 文件直接指向一次提交，而不是一个符号引用。问题在于你通常并不想在一个分离的头的环境下工作，因为太容易丢失变更了。如果你先执行了一次submodule update，然后在那个子模块目录里不创建分支就进行提交，然后再次从上层项目里运行git submodule update同时不进行提交，Git会毫无提示地覆盖你的变更。技术上讲你不会丢失工作，但是你将失去指向它的分支，因此会很难取到。&lt;/p&gt;

&lt;p&gt;为了避免这个问题，当你在子模块目录里工作时应使用git checkout -b work创建一个分支。当你再次在子模块里更新的时候，它仍然会覆盖你的工作，但是至少你拥有一个可以回溯的指针。&lt;/p&gt;

&lt;p&gt;切换带有子模块的分支同样也很有技巧。如果你创建一个新的分支，增加了一个子模块，然后切换回不带该子模块的分支，你仍然会拥有一个未被追踪的子模块的目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b rack
Switched to a new branch &amp;quot;rack&amp;quot;
$ git submodule add git@github.com:schacon/rack.git rack
    Initialized empty Git repository in /opt/myproj/rack/.git/
...
Receiving objects: 100% (3184/3184), 677.42 KiB | 34 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
$ git commit -am &#39;added rack submodule&#39;
[rack cc49a69] added rack submodule
2 files changed, 4 insertions(+), 0 deletions(-)
create mode 100644 .gitmodules
create mode 160000 rack
$ git checkout master
Switched to branch &amp;quot;master&amp;quot;
$ git status
On branch master
Untracked files:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
rack/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你将不得不将它移走或者删除，这样的话当你切换回去的时候必须重新克隆它——你可能会丢失你未推送的本地的变更或分支。&lt;/p&gt;

&lt;p&gt;最后一个需要引起注意的是关于从子目录切换到子模块的。如果你已经跟踪了你项目中的一些文件但是想把它们移到子模块去，你必须非常小心，否则Git会生你的气。假设你的项目中有一个子目录里放了 rack 的文件，然后你想将它转换为子模块。如果你删除子目录然后运行submodule add，Git会向你大吼：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -Rf rack/
$ git submodule add git@github.com:xxx/rack.git rack
&#39;rack&#39; already exists in the index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须先将rack目录撤回。然后你才能加入子模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rm -r rack
$ git submodule add git@github.com:schacon/rack.git rack
Initialized empty Git repository in /opt/testsub/rack/.git/
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 88 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在假设你在一个分支里那样做了。如果你尝试切换回一个仍然在目录里保留那些文件而不是子模块的分支时——你会得到下面的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
error: Untracked working tree file &#39;rack/AUTHORS&#39; would be overwritten by merge.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须先移除rack子模块的目录才能切换到不包含它的分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mv rack /tmp/
$ git checkout master
Switched to branch &amp;quot;master&amp;quot;
$ ls
README rack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，当你切换回来，你会得到一个空的rack目录。你可以运行git submodule update重新克隆，也可以将/tmp/rack目录重新移回空目录。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Blog迁移至Golang</title>
      <link>http://www.ledbk.com/Golang/Blog%E8%BF%81%E7%A7%BB%E8%87%B3Golang/</link>
      <pubDate>2013-03-17 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;之前用的wordpress不尽如人意,停了blog很久了也一直没空搞这个,现在重拾起来.最近比较着迷Golang于是用Gor搭建了一个blog,花了一个下午写了下css,先跑起来后面慢慢优化&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>